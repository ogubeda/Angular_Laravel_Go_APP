package data

import (
	"errors"
	"goSongs/common"
	"goSongs/models"
	"github.com/gin-gonic/gin"
	"net/http"
	"goSongs/controllers"
)

func SongFavorite(c *gin.Context) {
	id := c.Params.ByName("id")
	var song models.Songs
	err := controllers.GetSongByID(&song, id)
	if err != nil {
		c.JSON(http.StatusNotFound, common.NewError("songs", errors.New("Invalid ID")))
		return
	}
	myUserModel := c.MustGet("my_user_model").(models.UserModel)
	err = song.favoriteBy(models.GetSongUserModel(myUserModel))
	// serializer := ArticleSerializer{c, articleModel}
	// c.JSON(http.StatusOK, gin.H{"song": serializer.Response()})
	c.JSON(http.StatusOK, gin.H{"song": "test"})

}

// func SongUnfavorite(c *gin.Context) {
// 	slug := c.Param("slug")
// 	articleModel, err := FindOneArticle(&ArticleModel{Slug: slug})
// 	if err != nil {
// 		c.JSON(http.StatusNotFound, common.NewError("articles", errors.New("Invalid slug")))
// 		return
// 	}
// 	myUserModel := c.MustGet("my_user_model").(models.UserModel)
// 	err = articleModel.unFavoriteBy(GetArticleUserModel(myUserModel))
// 	serializer := ArticleSerializer{c, articleModel}
// 	c.JSON(http.StatusOK, gin.H{"article": serializer.Response()})
// }